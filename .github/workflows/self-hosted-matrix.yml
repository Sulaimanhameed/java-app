name: Optimized Matrix Build with Docker

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: catninjauser/java-app
  DOCKER_REGISTRY: docker.io

jobs:
  test:
    name: Test Java ${{ matrix.java-version }} on ${{ matrix.os }}
    
    strategy:
      matrix:
        java-version: [17, 21, 24]
        os: [ubuntu-22.04, ubuntu-24.04]
      fail-fast: false
      max-parallel: 4
    
    runs-on: [self-hosted, '${{ matrix.os }}']
    timeout-minutes: 30
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true
      
      - name: Display Runner Info
        run: |
          echo "Runner: $(hostname)"
          echo "OS: $(lsb_release -d 2>/dev/null || echo 'Linux')"
          echo "Matrix: Java ${{ matrix.java-version }} on ${{ matrix.os }}"
      
      - name: Set up JDK ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          java-version: '${{ matrix.java-version }}'
          distribution: 'temurin'
          cache: maven
      
      - name: Add Maven Wrapper if Missing
        run: |
          if [ ! -f "mvnw" ]; then
            mvn wrapper:wrapper
            chmod +x mvnw
          else
            chmod +x mvnw
          fi
      
      - name: Run Tests Only
        run: |
          echo "Running tests..."
          ./mvnw clean test -B

  build:
    name: Build Application
    needs: test
    runs-on: [self-hosted]
    timeout-minutes: 20
    if: success()
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Add Maven Wrapper if Missing
        run: |
          if [ ! -f "mvnw" ]; then
            mvn wrapper:wrapper
            chmod +x mvnw
          else
            chmod +x mvnw
          fi
      
      - name: Build Application
        run: |
          echo "Building application..."
          ./mvnw clean package -DskipTests -B
      
      - name: Verify Build Output
        run: |
          echo "Build verification:"
          ls -la target/
          if ls target/*.jar 1> /dev/null 2>&1; then
            echo "JAR file created successfully:"
            ls -lh target/*.jar
          else
            echo "No JAR file found"
            exit 1
          fi
      
      - name: Upload JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: application-jar
          path: target/*.jar
          retention-days: 7

  dockerize-and-push:
    name: Dockerize and Push
    needs: build
    runs-on: [self-hosted]
    timeout-minutes: 20
    if: success() && github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          clean: true
      
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: application-jar
          path: target/
      
      - name: Verify JAR artifact exists
        working-directory: /home/ubuntu/actions-runner/_work/java-app/java-app
        run: |
          echo "Checking downloaded artifacts:"
          ls -la target/
          if ls target/*.jar 1> /dev/null 2>&1; then
            echo "✅ JAR files found:"
            ls -lh target/*.jar
          else
            echo "❌ No JAR files found in target/"
            exit 1
          fi
      
      - name: Fix Docker permissions
        run: |
          sudo chmod 666 /var/run/docker.sock
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: /home/ubuntu/actions-runner/_work/java-app/java-app
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Verify Docker image
        run: |
          echo "Docker image pushed successfully!"
          echo "Image tags:"
          echo "${{ steps.meta.outputs.tags }}"
          docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest
          echo "Docker image verified and ready!"

  build-summary:
    name: Build Summary  
    needs: [test, build, dockerize-and-push]
    runs-on: [self-hosted]
    if: always()
    
    steps:
      - name: Display Results
        run: |
          echo "Build Pipeline Complete!"
          echo ""
          echo "Tests ran on matrix combinations:"
          echo "  • Java 17, 21, 24 on Ubuntu 22.04 & 24.04"
          echo ""
          echo "Build Status: ${{ needs.build.result }}"
          echo "Docker Status: ${{ needs.dockerize-and-push.result }}"
          echo ""
          if [ "${{ needs.dockerize-and-push.result }}" == "success" ]; then
            echo " Docker image available: docker pull ${{ env.DOCKER_IMAGE_NAME }}:latest"
          fi